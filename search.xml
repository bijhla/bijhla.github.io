<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2025/01/22/test/test/"/>
      <url>/2025/01/22/test/test/</url>
      
        <content type="html"><![CDATA[<p>test</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT_kupc2021_e</title>
      <link href="/2025/01/22/AT-kupc2021-e/AT-kupc2021-e/"/>
      <url>/2025/01/22/AT-kupc2021-e/AT-kupc2021-e/</url>
      
        <content type="html"><![CDATA[<h1 id="AT-kupc2021-e"><a href="#AT-kupc2021-e" class="headerlink" title="AT_kupc2021_e"></a>AT_kupc2021_e</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一张<strong>无向连通图</strong>以及一颗<strong>生成树</strong>，要求给这张图的每条边赋权值，使得这颗生成树为<strong>最小生成树</strong>，且边权按照<strong>给定</strong>的顺序排列起来的<strong>字典序最小</strong>。</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>我们将其视作向树上加边，而每添加一条边就会出现一个环（只考虑树边），而这条边的权值应该比环上的边的权值（还没赋权的）都小。</p><p>e.g.</p><p><img src="/2025/01/22/AT-kupc2021-e/AT-kupc2021-e/p3t1nubh.png" alt></p><p>在这张图中，黑色和红色的边是树边，蓝色是要添加的边，红色表示已经确定了边权的边，黑色表示还没确定，边上的数字表示这条边在给定顺序的下标。</p><ol><li><p>将这 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.554ex" role="img" focusable="false" viewbox="0 -665 500 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g></g></svg></mjx-container>， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g></g></g></svg></mjx-container>， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewbox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g></g></g></svg></mjx-container> 几条边按大小排序，并依次赋权</p></li><li><p>最后再给蓝色边赋权</p></li></ol><p>我们按给定的顺序从左往右依次计算，如果是树边并且没赋权就直接赋权，如果是非树边就按照上面的方法构造即可。</p><p>那么现在的问题就是如何更新环上的边以及查询那些边没有被赋权。</p><p>这里提供两种方法。</p><h3 id="树剖"><a href="#树剖" class="headerlink" title="树剖"></a>树剖</h3><p>线段树每个节点维护一个set，表示有哪些点没有被赋权，实现单点修改，区间查询即可（因为每个节点只会被计算一次，所以还是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.052ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4001 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2535,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(3012,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3612,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 的）。</p><p><del>代码太丑就不放了。</del></p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>将赋过权的点缩成一个，然后将这条边的两端点分别暴力向上跳到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.851ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 1260 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(731,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container> 即可。</p><p>详见代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair <span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">//存边</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> u, v, ty;</span><br><span class="line">} e[N];</span><br><span class="line">vector &lt;PII&gt; g[N];</span><br><span class="line"><span class="comment">//fat是并查集，f是lca，ed[u]表示u和u的父亲组成边的编号，cnt用来记录当前赋的边权</span></span><br><span class="line"><span class="type">int</span> n, m, ans[N], fat[N], d[N], f[N][<span class="number">50</span>], ed[N], M, cnt;</span><br><span class="line"><span class="comment">//存有哪些边这次需要计算</span></span><br><span class="line">set &lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">//初始化并查集</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span> <span class="params">(<span class="type">int</span> n)</span> </span>{<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fat[i] = i;}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span> <span class="params">(<span class="type">int</span> x)</span> </span>{<span class="keyword">return</span> fat[x] == x ? x : fat[x] = <span class="built_in">find</span> (fat[x]);}</span><br><span class="line"><span class="comment">//将深度大的合并到深度小的</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> p = <span class="built_in">find</span> (x), q = <span class="built_in">find</span> (y);</span><br><span class="line">    <span class="keyword">if</span> (p == q) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (d[p] &gt; d[q]) fat[p] = q;</span><br><span class="line">    <span class="keyword">else</span> fat[q] = p;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> from)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[u][<span class="number">0</span>] = fa, d[u] = d[fa] + <span class="number">1</span>, ed[u] = from;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; i++) f[u][i] = f[f[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) g[u].<span class="built_in">size</span> (); i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> v = g[u][i].first, w = g[u][i].second;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span> (v, u, w);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//求lca</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (d[y] &lt; d[x]) <span class="built_in">swap</span> (x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = M; i &gt;= <span class="number">0</span>; i--) {<span class="keyword">if</span> (d[f[y][i]] &gt;= d[x]) y = f[y][i];}</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = M; i &gt;= <span class="number">0</span>; i--) {<span class="keyword">if</span> (f[y][i] != f[x][i]) x = f[x][i], y = f[y][i];}</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="comment">//fat也表示组成这个所成的点中深度最浅的点</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span> (u) == <span class="built_in">find</span> (v)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> fa = <span class="built_in">lca</span> (u, v);</span><br><span class="line">    u = <span class="built_in">find</span> (u), v = <span class="built_in">find</span> (v);</span><br><span class="line">    <span class="comment">//跳u点</span></span><br><span class="line">    <span class="keyword">while</span> (d[u] &gt; d[fa]) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!ans[ed[u]]) s.<span class="built_in">insert</span> (ed[u]);</span><br><span class="line">        <span class="built_in">merge</span> (u, f[u][<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//每次跳到缩成点深度最浅的地方</span></span><br><span class="line">        u = <span class="built_in">find</span> (f[u][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (d[u] &lt;= d[fa]) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//跳v点</span></span><br><span class="line">    <span class="keyword">while</span> (d[v] &gt; d[fa]) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!ans[ed[v]]) s.<span class="built_in">insert</span> (ed[v]);</span><br><span class="line">        <span class="built_in">merge</span> (v, f[v][<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//每次跳到缩成点深度最浅的地方</span></span><br><span class="line">        v = <span class="built_in">find</span> (f[v][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (d[v] &lt;= d[fa]) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//给边赋权</span></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span> ()) </span><br><span class="line">    {</span><br><span class="line">        ans[*s.<span class="built_in">begin</span> ()] = ++cnt;</span><br><span class="line">        s.<span class="built_in">erase</span> (s.<span class="built_in">begin</span> ());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span> (<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span> (<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span> (<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">init</span> (n);</span><br><span class="line">    M = <span class="built_in">log2</span> (n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].ty;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (e[i].ty) g[e[i].u].<span class="built_in">PB</span> (<span class="built_in">MP</span> (e[i].v, i)), g[e[i].v].<span class="built_in">PB</span> (<span class="built_in">MP</span> (e[i].u, i));</span><br><span class="line">    <span class="built_in">dfs</span> (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//如果是非树边就先处理环上的，再给自己赋值</span></span><br><span class="line">        <span class="keyword">if</span> (!e[i].ty) <span class="built_in">update</span> (e[i].u, e[i].v), ans[i] = ++cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!ans[i]) ans[i] = ++cnt, <span class="built_in">merge</span> (e[i].u, e[i].v);</span><br><span class="line">        <span class="comment">//如果是树边就给自己赋权并合并边所连接的点</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">" \n"</span>[i == m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">1 2 0</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">2 4 0</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3 1 4 5 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾NAS</title>
      <link href="/2025/01/22/%E5%9E%83%E5%9C%BENAS/%E5%9E%83%E5%9C%BENAS/"/>
      <url>/2025/01/22/%E5%9E%83%E5%9C%BENAS/%E5%9E%83%E5%9C%BENAS/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾NAS"><a href="#垃圾NAS" class="headerlink" title="垃圾NAS"></a>垃圾NAS</h1><p><strong>本文仅提供部署的文档或博客地址，无具体的部署过程</strong></p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件:"></a>硬件:</h2><p>CPU:闲鱼 G4560T 25元</p><p>主板:闲鱼 华硕h110m-f 105元</p><p>内存:剩的两根各4G 0元</p><p>硬盘:剩的希捷video 3.5 hdd 1T 0元 + 西数红盘 100元</p><p>电源:闲鱼/pdd 垃圾长城拆机200w 15元</p><p>机箱:朋友有多的 15元</p><p>散热:pdd 垃圾  5元</p><p>日常待机功率预估20w-30w</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件:"></a>软件:</h2><p>系统:ubuntu</p><p>Jellyfin中国特供版+alist+komga+阅读服务端+tailscale+immich+transmission+zfs raid1</p><p>影音+网盘+漫画+电纸书+公网服务+照片+下载+文件系统</p><p>待提高:</p><p>电源可以往下降，但我没找到合适的，至少80w，需要主板的24pin，u的12pin和至少1个sata以及风扇</p><p>想用itx板，但没找到便宜合适的，希望能换</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署:"></a>部署:</h3><h4 id="装机安装ubuntu"><a href="#装机安装ubuntu" class="headerlink" title="装机安装ubuntu"></a>装机安装ubuntu</h4><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h4><p>win下:xshell,transmission,cherry studio(AI,推荐安装),浏览器沉浸式翻译插件(阅读英语文档)</p><p>linux下:<a href="https://blog.csdn.net/weixin_43145941/article/details/119345234">openssh-server</a>,<a href="https://blog.csdn.net/mudarn/article/details/144209607">docker和doker-compose</a>,<a href="https://mihomo.party/docs/install">mihomo</a></p><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p>有点麻烦</p><p><a href="https://zhuanlan.zhihu.com/p/516082754">zfs</a></p><p>剩下的问AI即可</p><h4 id="网盘"><a href="#网盘" class="headerlink" title="网盘:"></a>网盘:</h4><p>比较简单，有懒人脚本</p><p><a href="https://alist.nn.ci/zh/guide/install/script.html">alist</a></p><h4 id="漫画"><a href="#漫画" class="headerlink" title="漫画:"></a>漫画:</h4><p>简单，官网包下下来就能用</p><p><a href="https://download.komga.org/">komga</a></p><h4 id="阅读服务端"><a href="#阅读服务端" class="headerlink" title="阅读服务端"></a>阅读服务端</h4><p>直接部署服务器版最方便</p><p><a href="https://github.com/hectorqin/reader/blob/master/doc.md#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%88">阅读服务端</a></p><h4 id="照片"><a href="#照片" class="headerlink" title="照片:"></a>照片:</h4><p><a href="https://immich.app/docs/install/script">immich官方的一键脚本</a></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载:"></a>下载:</h4><p>看着挺简单的</p><p><a href="https://www.cnblogs.com/baoboshi/p/16404774.html">transmission</a></p><h4 id="影音"><a href="#影音" class="headerlink" title="影音:"></a>影音:</h4><p>感觉对小白而言是最麻烦的一个，参照作者文档部署吧</p><p><a href="https://www.chiphell.com/thread-2375777-1-1.html">Jellyfin中国特供版</a></p><h4 id="公网服务"><a href="#公网服务" class="headerlink" title="公网服务:"></a>公网服务:</h4><p><a href="https://tailscale.com/kb/1031/install-linux">tailscale官方文档</a></p><p><a href="https://www.yisu.com/ask/96541863.html">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
