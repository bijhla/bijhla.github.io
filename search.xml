<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AT_kupc2021_e</title>
      <link href="/2025/01/22/AT-kupc2021-e/"/>
      <url>/2025/01/22/AT-kupc2021-e/</url>
      
        <content type="html"><![CDATA[<h1 id="AT-kupc2021-e"><a href="#AT-kupc2021-e" class="headerlink" title="AT_kupc2021_e"></a>AT_kupc2021_e</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一张<strong>无向连通图</strong>以及一颗<strong>生成树</strong>，要求给这张图的每条边赋权值，使得这颗生成树为<strong>最小生成树</strong>，且边权按照<strong>给定</strong>的顺序排列起来的<strong>字典序最小</strong>。</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>我们将其视作向树上加边，而每添加一条边就会出现一个环（只考虑树边），而这条边的权值应该比环上的边的权值（还没赋权的）都小。</p><p>e.g.</p><p><img src="L:\otherfiles\git\hexo\source_posts\p3t1nubh-1737529497767-3.png"></p><p>在这张图中，黑色和红色的边是树边，蓝色是要添加的边，红色表示已经确定了边权的边，黑色表示还没确定，边上的数字表示这条边在给定顺序的下标。</p><ol><li><p>将这 $1$， $3$， $5$， $6$ 几条边按大小排序，并依次赋权</p></li><li><p>最后再给蓝色边赋权</p></li></ol><p>我们按给定的顺序从左往右依次计算，如果是树边并且没赋权就直接赋权，如果是非树边就按照上面的方法构造即可。</p><p>那么现在的问题就是如何更新环上的边以及查询那些边没有被赋权。</p><p>这里提供两种方法。</p><h3 id="树剖"><a href="#树剖" class="headerlink" title="树剖"></a>树剖</h3><p>线段树每个节点维护一个set，表示有哪些点没有被赋权，实现单点修改，区间查询即可（因为每个节点只会被计算一次，所以还是 $O (nlogn)$ 的）。</p><p><del>代码太丑就不放了。</del></p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>将赋过权的点缩成一个，然后将这条边的两端点分别暴力向上跳到 $lca$ 即可。</p><p>详见代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair <span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">//存边</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u, v, ty;</span><br><span class="line">&#125; e[N];</span><br><span class="line">vector &lt;PII&gt; g[N];</span><br><span class="line"><span class="comment">//fat是并查集，f是lca，ed[u]表示u和u的父亲组成边的编号，cnt用来记录当前赋的边权</span></span><br><span class="line"><span class="type">int</span> n, m, ans[N], fat[N], d[N], f[N][<span class="number">50</span>], ed[N], M, cnt;</span><br><span class="line"><span class="comment">//存有哪些边这次需要计算</span></span><br><span class="line">set &lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">//初始化并查集</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fat[i] = i;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> fat[x] == x ? x : fat[x] = <span class="built_in">find</span> (fat[x]);&#125;</span><br><span class="line"><span class="comment">//将深度大的合并到深度小的</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="built_in">find</span> (x), q = <span class="built_in">find</span> (y);</span><br><span class="line">    <span class="keyword">if</span> (p == q) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (d[p] &gt; d[q]) fat[p] = q;</span><br><span class="line">    <span class="keyword">else</span> fat[q] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[u][<span class="number">0</span>] = fa, d[u] = d[fa] + <span class="number">1</span>, ed[u] = from;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; i++) f[u][i] = f[f[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>) g[u].<span class="built_in">size</span> (); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = g[u][i].first, w = g[u][i].second;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span> (v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求lca</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[y] &lt; d[x]) <span class="built_in">swap</span> (x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = M; i &gt;= <span class="number">0</span>; i--) &#123;<span class="keyword">if</span> (d[f[y][i]] &gt;= d[x]) y = f[y][i];&#125;</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = M; i &gt;= <span class="number">0</span>; i--) &#123;<span class="keyword">if</span> (f[y][i] != f[x][i]) x = f[x][i], y = f[y][i];&#125;</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fat也表示组成这个所成的点中深度最浅的点</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span> (u) == <span class="built_in">find</span> (v)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> fa = <span class="built_in">lca</span> (u, v);</span><br><span class="line">    u = <span class="built_in">find</span> (u), v = <span class="built_in">find</span> (v);</span><br><span class="line">    <span class="comment">//跳u点</span></span><br><span class="line">    <span class="keyword">while</span> (d[u] &gt; d[fa]) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ans[ed[u]]) s.<span class="built_in">insert</span> (ed[u]);</span><br><span class="line">        <span class="built_in">merge</span> (u, f[u][<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//每次跳到缩成点深度最浅的地方</span></span><br><span class="line">        u = <span class="built_in">find</span> (f[u][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (d[u] &lt;= d[fa]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳v点</span></span><br><span class="line">    <span class="keyword">while</span> (d[v] &gt; d[fa]) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ans[ed[v]]) s.<span class="built_in">insert</span> (ed[v]);</span><br><span class="line">        <span class="built_in">merge</span> (v, f[v][<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//每次跳到缩成点深度最浅的地方</span></span><br><span class="line">        v = <span class="built_in">find</span> (f[v][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (d[v] &lt;= d[fa]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给边赋权</span></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span> ()) </span><br><span class="line">    &#123;</span><br><span class="line">        ans[*s.<span class="built_in">begin</span> ()] = ++cnt;</span><br><span class="line">        s.<span class="built_in">erase</span> (s.<span class="built_in">begin</span> ());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span> (<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span> (<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span> (<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">init</span> (n);</span><br><span class="line">    M = <span class="built_in">log2</span> (n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].ty;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (e[i].ty) g[e[i].u].<span class="built_in">PB</span> (<span class="built_in">MP</span> (e[i].v, i)), g[e[i].v].<span class="built_in">PB</span> (<span class="built_in">MP</span> (e[i].u, i));</span><br><span class="line">    <span class="built_in">dfs</span> (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果是非树边就先处理环上的，再给自己赋值</span></span><br><span class="line">        <span class="keyword">if</span> (!e[i].ty) <span class="built_in">update</span> (e[i].u, e[i].v), ans[i] = ++cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!ans[i]) ans[i] = ++cnt, <span class="built_in">merge</span> (e[i].u, e[i].v);</span><br><span class="line">        <span class="comment">//如果是树边就给自己赋权并合并边所连接的点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">1 2 0</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">2 4 0</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3 1 4 5 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾NAS</title>
      <link href="/2025/01/22/%E5%9E%83%E5%9C%BENAS/"/>
      <url>/2025/01/22/%E5%9E%83%E5%9C%BENAS/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾NAS"><a href="#垃圾NAS" class="headerlink" title="垃圾NAS"></a>垃圾NAS</h1><p><strong>本文仅提供部署的文档或博客地址，无具体的部署过程</strong></p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件:"></a>硬件:</h2><p>CPU:闲鱼 G4560T 25元</p><p>主板:闲鱼 华硕h110m-f 105元</p><p>内存:剩的两根各4G 0元</p><p>硬盘:剩的机械1T 0元</p><p>电源:闲鱼&#x2F;pdd 垃圾长城拆机160w&#x2F;200w 15元</p><p>机箱:pdd 垃圾matx 30元</p><p>散热:pdd 垃圾  5元</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件:"></a>软件:</h2><p>系统:ubuntu</p><p>emby+alist+komga+阅读服务端+tailscale+immich+transmission</p><p>影音+网盘+漫画+电纸书+公网服务+照片+下载</p><p>待提高:</p><p>电源可以往下降，但我没找到合适的，至少80w，需要主板的24pin，u的12pin和至少1个sata以及风扇</p><p>机箱也可以降，只要是matx就行，没显卡不考虑限高，没用itx板是因为支持G4560T的itx板太贵</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署:"></a>部署:</h3><h4 id="装机安装ubuntu"><a href="#装机安装ubuntu" class="headerlink" title="装机安装ubuntu"></a>装机安装ubuntu</h4><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h4><p>win下:xshell,transmission,cherry studio(AI,推荐安装),浏览器沉浸式翻译插件(阅读英语文档)</p><p>linux下:<a href="https://blog.csdn.net/weixin_43145941/article/details/119345234">openssh-server</a>,<a href="https://blog.csdn.net/mudarn/article/details/144209607">docker和doker-compose</a>,<a href="https://mihomo.party/docs/install">mihomo</a></p><h4 id="网盘"><a href="#网盘" class="headerlink" title="网盘:"></a>网盘:</h4><p>比较简单，有懒人脚本</p><p><a href="https://alist.nn.ci/zh/guide/install/script.html">alist</a></p><h4 id="漫画"><a href="#漫画" class="headerlink" title="漫画:"></a>漫画:</h4><p>简单，官网包下下来就能用</p><p><a href="https://download.komga.org/">komga</a></p><h4 id="阅读服务端"><a href="#阅读服务端" class="headerlink" title="阅读服务端"></a>阅读服务端</h4><p>直接部署服务器版最方便</p><p><a href="https://github.com/hectorqin/reader/blob/master/doc.md#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%88">阅读服务端</a></p><h4 id="照片"><a href="#照片" class="headerlink" title="照片:"></a>照片:</h4><p><a href="https://immich.app/docs/install/script">immich官方的一键脚本</a></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载:"></a>下载:</h4><p>看着挺简单的</p><p><a href="https://www.cnblogs.com/baoboshi/p/16404774.html">transmission</a></p><h4 id="影音"><a href="#影音" class="headerlink" title="影音:"></a>影音:</h4><p>感觉对小白而言是最麻烦的一个，参照作者文档部署吧</p><p><a href="https://www.chiphell.com/thread-2375777-1-1.html">Jellyfin中国特供版</a></p><h4 id="公网服务"><a href="#公网服务" class="headerlink" title="公网服务:"></a>公网服务:</h4><p><a href="https://tailscale.com/kb/1031/install-linux">tailscale官方文档</a></p><p><a href="https://www.yisu.com/ask/96541863.html">博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
